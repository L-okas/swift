func min(_ a: Int, _ b: Int) -> Int {
    a < b ? a : b
    
}
print(min(1, 3))

func lastDigit(_ number: Int) -> Int {
    return number % 10
}
lastDigit(12)

func first(_ N: Int) -> [Int] {
    //Can be initialized two ways:
    //var numbers: [Int]()
    var numbers: [Int] = []
    for number in 1...N {
        numbers.append(number)
    }
    return numbers
}
print(first(7))

func reverse(integers: [Int]) -> [Int] {
    //To reverse array we can use existing swift method reresed()
    //return integers.reversed()
    
    //Our own predefined method to reverse array, which takes array as parameter and returns new reversed array
    var numbers: [Int] = []
    var counter = 1
    for (index, number) in integers.enumerated() {
        numbers.append(integers[integers.count - counter])
        counter += 1
    }
    return numbers
}
print(reverse(integers: [1,2,3,4,5]))

func sum(integers: [Int]) -> Int {
    //We can sum all integers in array with existing swift method reduce(0, +)
    //return integers.reduce(0, +)
    var sum = 0
    
    for integer in integers {
        sum += integer
    }
    return sum
}
print(sum(integers: [2,1,10]))
